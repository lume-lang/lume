namespace std

/// Defines an ordered, integer-indexed container which can be used as a container for values. Since the `Array` type
/// is a generic type, all values within the array must be of the same type.
///
/// While they can be created like any other class using [`Array::new()`], they are most often created
/// implicitly by using the array literal syntax. To create an array, surround a comma-separated list of
/// values with square brackets:
///
/// ```
/// # Create an empty array
/// []
///
/// # Create an array with values
/// [1, 2, 3]
/// ```
///
/// Both of these literals create an array of type `Array<Int32>`, or more generally, `[Int32]`. To explicitly define
/// the type of the array, you can declare it's type like so:
///
/// ```
/// let a: [Int32] = [10, 20, 30];
/// ```
struct Array<T>
{ }

impl<T> Array<T> {
    /// Allocates a new array with the given items.
    ///
    /// When creating a new array with a list of items, it allocates an array
    /// with the capacity of the length of the items.
    pub fn external new(...items: T) -> Array<T>

    /// Allocates a new array with enough space for at least `capacity` elements.
    ///
    /// When creating an array with a set capacity, it's length will still be zero.
    pub fn with_capacity(capacity: UInt64) -> Array<T> {}
}
